{"/home/travis/build/npmtest/node-npmtest-mockgoose/test.js":"/* istanbul instrument in package npmtest_mockgoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mockgoose/lib.npmtest_mockgoose.js":"/* istanbul instrument in package npmtest_mockgoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mockgoose = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mockgoose = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mockgoose/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mockgoose && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mockgoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mockgoose\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mockgoose.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mockgoose.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mockgoose.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mockgoose.__dirname + '/lib.npmtest_mockgoose.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/built/mockgoose.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Debug = require('debug');\nvar portfinder = require(\"portfinder\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar fs = require(\"fs-extra\");\nvar mongodb_prebuilt_1 = require(\"mongodb-prebuilt\");\nvar mockgoose_helper_1 = require(\"./mockgoose-helper\");\n//const uuidV4 = require('uuid/v4');\nvar uuidV4 = require('uuid/v4');\nvar Mockgoose = (function () {\n    function Mockgoose(mongooseObj) {\n        this.mongodHelper = new mongodb_prebuilt_1.MongodHelper();\n        this.debug = Debug('Mockgoose');\n        this.helper = new mockgoose_helper_1.MockgooseHelper(mongooseObj, this);\n        this.mongooseObj = mongooseObj;\n        this.mongooseObj.mocked = true;\n    }\n    Mockgoose.prototype.prepareStorage = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var tempDBPathPromise = _this.getTempDBPath();\n            var openPortPromise = _this.getOpenPort();\n            Promise.all([tempDBPathPromise, openPortPromise]).then(function (promiseValues) {\n                var dbPath = promiseValues[0];\n                var openPort = promiseValues[1].toString();\n                var storageEngine = _this.getMemoryStorageName();\n                var mongodArgs = [\n                    '--port', openPort,\n                    '--storageEngine', storageEngine,\n                    '--dbpath', dbPath\n                ];\n                _this.debug(\"@prepareStorage mongod args, \" + mongodArgs);\n                _this.mongodHelper.mongoBin.commandArguments = mongodArgs;\n                _this.mongodHelper.run().then(function () {\n                    var connectionString = _this.getMockConnectionString(openPort);\n                    _this.mockConnectCalls(connectionString);\n                    resolve();\n                }, function (e) {\n                    throw e;\n                    // return this.prepareStorage();\n                });\n            });\n        });\n    };\n    Mockgoose.prototype.getMockConnectionString = function (port) {\n        var dbName = 'mockgoose-temp-db-' + uuidV4();\n        var connectionString = \"mongodb://localhost:\" + port + \"/\" + dbName;\n        return connectionString;\n    };\n    Mockgoose.prototype.mockConnectCalls = function (connection) {\n        var createConnection = new ConnectionWrapper('createConnection', this.mongooseObj, connection);\n        this.mongooseObj.createConnection = function () { return createConnection.run(arguments); };\n        var connect = new ConnectionWrapper('connect', this.mongooseObj, connection);\n        this.mongooseObj.connect = function () { return connect.run(arguments); };\n    };\n    Mockgoose.prototype.getOpenPort = function () {\n        return new Promise(function (resolve, reject) {\n            portfinder.getPort({ port: 27017 }, function (err, port) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(port);\n                }\n            });\n        });\n    };\n    // todo: add support to mongodb-download or prebuilt to return version\n    Mockgoose.prototype.getMemoryStorageName = function () {\n        return \"ephemeralForTest\";\n    };\n    Mockgoose.prototype.getTempDBPath = function () {\n        return new Promise(function (resolve, reject) {\n            var tempDir = path.resolve(os.tmpdir(), \"mockgoose\", Date.now().toString());\n            fs.ensureDir(tempDir, function (err) {\n                if (err)\n                    throw err;\n                resolve(tempDir);\n            });\n        });\n    };\n    return Mockgoose;\n}());\nexports.Mockgoose = Mockgoose;\nvar ConnectionWrapper = (function () {\n    function ConnectionWrapper(functionName, mongoose, connectionString) {\n        this.functionName = functionName;\n        this.mongoose = mongoose;\n        this.functionCode = mongoose[functionName];\n        this.connectionString = connectionString;\n    }\n    ConnectionWrapper.prototype.run = function (args) {\n        this.originalArguments = args;\n        var mockedArgs = args;\n        mockedArgs[0] = this.connectionString;\n        return this.functionCode.apply(this.mongoose, mockedArgs);\n    };\n    return ConnectionWrapper;\n}());\nexports.ConnectionWrapper = ConnectionWrapper;\n//# sourceMappingURL=/Users/winfinit/workspace/personal/Mockgoose/mockgoose.js.map","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/built/mockgoose-helper.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Debug = require('debug');\nvar async_1 = require(\"async\");\nvar MockgooseHelper = (function () {\n    function MockgooseHelper(mongoose, mockgoose) {\n        this.mongoose = mongoose;\n        this.mockgoose = mockgoose;\n        this.debug = Debug('MockgooseHelper');\n    }\n    MockgooseHelper.prototype.setDbVersion = function (version) {\n        {\n            this.mockgoose.mongodHelper.mongoBin.mongoDBPrebuilt.mongoDBDownload.options.version = version;\n        }\n    };\n    MockgooseHelper.prototype.reset = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            async_1.each(_this.mongoose.connections, function (connection, callback) {\n                // check if it is mockgoose connection\n                if (!/mockgoose-temp-db-/.test(connection.name)) {\n                    return callback();\n                }\n                if (connection.readyState !== 1) {\n                    return callback();\n                }\n                connection.dropDatabase(function (err) {\n                    callback();\n                }, function (e) {\n                    _this.debug(\"@reset err dropping database \" + e);\n                    callback();\n                });\n            }, function (err) {\n                if (err) {\n                    _this.debug(\"@reset err \" + err);\n                    reject();\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    };\n    ;\n    MockgooseHelper.prototype.isMocked = function () {\n        return this.mongoose.mocked;\n    };\n    return MockgooseHelper;\n}());\nexports.MockgooseHelper = MockgooseHelper;\n//# sourceMappingURL=/Users/winfinit/workspace/personal/Mockgoose/mockgoose-helper.js.map","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/bugs/190.js":"const mongoose = require('mongoose');\nconst mockgoose = require('../mockgoose');\nconst expect = require('chai').expect;\n\nmockgoose( mongoose )\n\n// Create the mongoose connection on init\nbefore(function(done) {\n    mongoose.connect('mongodb://example.com/TestingDB', function(err) {\n        done(err)\n    })\n});\n\n// Close the fake connection after all tests are done\nafter(function(done) {\n    console.log('Closing') // Shows in console (always)\n    mongoose.connection.close(function() {\n        console.log('Closed') // Also. always shows in console\n        done()\n    })\n})\n\n\ndescribe('Foobar', function () {\n    describe('.createFoo', function () {\n        it( 'Creating foo with no data', function( done ) {\n            expect( null ).to.not.equal( null );\n            done();\n        })\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/bugs/192.js":"\"use strict\";\n\nvar expect = require('chai').expect;\nvar Mongoose = require('mongoose').Mongoose;\nvar mockgoose = require('../Mockgoose');\nvar mongoose = new Mongoose();\nmockgoose(mongoose);\n\nbefore(function(done) {\n  console.log('inside before!');\n  mongoose.connect('mongodb://localhost/mydb', function() {\n      console.log('connected');\n      done(); \n  });\n});\n\ndescribe('callback', function todoDescribe() {\n  var modelSchema = new Schema({\n      name: {\n          type: Schema.Types.String,\n          trim: true,\n          select: true,\n          unique: true,\n          required: true,\n          minlength: 4,\n          maxlength: 30\n      }\n  })\n\n  \n  it( 'Creating a document with a duplicate name', function( done ) {\n      Mymodel.createDoc( { name: 'Foo Bar Baz' }, function ( err1, data1 ) {\n          expect( err1 ).to.equal( null )\n  \n          Mymodel.createDoc( { name: 'Foo Bar Baz' }, function ( err2, data2 ) {\n              expect( err2 ).to.not.equal( null )\n              done()\n          })\n      })\n  })\n\n});\n","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/bugs/204-2.js":"import test from 'ava';\nimport sut from './server';\nimport request from 'supertest-as-promised';\nimport mongoose from 'mongoose';\nimport mockgoose from 'mockgoose';\n\ntest.before(async t => {\n    console.log('1');\n    await mockgoose(mongoose);\n    console.log('2');\n    const Subscription = mongoose.model('Subscription');\n    await Subscription.create({ id: 'found' })\n});\n\ntest('send message to an existent subscription', async t => {\n    const res = await request(sut).post('/api/found/message');\n    t.is(res.status, 200);\n});\n\ntest.after(t => mockgoose.reset(err => {\n  if (err) t.fail(err)\n}));\n","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/bugs/204.js":"import mongoose from 'mongoose'\nimport mockgoose from 'mockgoose'\n\nmockgoose(mongoose).then(function () {\n  mongoose.connect('mongodb://example.com/TestingDB', function (err) {\n    console.error(err)\n  })\n}) \n","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/bugs/63.js":"'use strict';\nvar mongoose = require('mongoose');\nrequire('../mockgoose')(mongoose);\n\nmongoose.connect('mongodb://127.0.0.1:27017/test', function(err){\n    if(err) return console.log(err);\n    console.log('connected. should disconnect in 1s.');\n});\n\nsetTimeout(function(){\n    mongoose.disconnect(function(err){\n        if(err) return console.log(err);\n        console.log('disconnected');\n    });\n}, 2000);\n","/home/travis/build/npmtest/node-npmtest-mockgoose/node_modules/mockgoose/specifyVersion.js":"var mongoose = require('mongoose');\nlet {Mockgoose} = require('./built/mockgoose');\nconst {MongoDBDownload} = require('mongodb-download');\n\nlet mockgoose = new Mockgoose(mongoose);\nmockgoose.helper.setDbVersion(\"3.2.1\");\n\nmockgoose.prepareStorage().then(() => {\n\tconsole.log('prepare storage ok', mongoose.mocked);\n\tmongoose.connect('mongodb://sdfsdfsdf:27017');\n\t\n\tmongoose.connection.on('connected', function () {  \n\t  console.log('Mongoose open');\n\t}); \n});\n//var Mockgoose = require('./Mockgoose')(mongoose).then(function() {\n\t\n\n//});\n"}